name: Security Scan with Trivy & Hadolint

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Required permission to update SECURITY.md

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-assume pytest-benchmark locust bandit safety flake8 mypy pytest-benchmark[histogram] pygal pygaljs matplotlib jq

      - name: 游닌 Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      - name: 游닌 Install Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      # 游늷 Bandit - An치lisis de seguridad en Python
      - name: Run Bandit (TXT)
        run: |
          bandit -r . -f txt -o bandit_report.txt || echo "Bandit found security issues."

      - name: Run Bandit (JSON)
        run: |
          bandit -r . -f json -o bandit_report.json || echo "Bandit found security issues."

      # 游늷 Safety - An치lisis de dependencias
      - name: Check dependencies for vulnerabilities with Safety
        run: safety check -r requirements.txt

      # 游늷 Flake8 - Linting en Python
      - name: Run Flake8 (TXT)
        run: |
          flake8 . --output-file=flake8_report.txt || echo "Flake8 found formatting issues."

      - name: Convert Flake8 output to JSON
        run: |
          jq -R -s -c 'split("\n") | map(select(length > 0)) | {flake8_report: .}' flake8_report.txt > flake8_report.json

      # 游늷 Mypy - Type Checking en Python
      - name: Run Mypy (TXT)
        run: |
          mypy . | tee mypy_report.txt || echo "Mypy found type inconsistencies."

      - name: Convert Mypy output to JSON
        run: |
          jq -R -s -c 'split("\n") | map(select(length > 0)) | {mypy_report: .}' mypy_report.txt > mypy_report.json

      # 游늷 Trivy - An치lisis de seguridad en Docker
      - name: Build Docker Image
        run: docker build -t my-docker-image .

      - name: Run Trivy scan (TXT)
        run: |
          trivy image --format table --output trivy_report.txt my-docker-image

      - name: Run Trivy scan (JSON)
        run: |
          trivy image --format json --output trivy_report.json my-docker-image

      # 游늷 Hadolint - Linting de Dockerfile
      - name: Run Hadolint (TXT)
        run: |
          hadolint Dockerfile --format tty > hadolint_report.txt || echo "Hadolint found issues."

      - name: Run Hadolint (JSON)
        run: |
          hadolint Dockerfile --format json > hadolint_report.json || echo "Hadolint found issues."

      # 游늷 Subir archivos TXT como artefactos en GitHub Actions
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.txt

      - name: Upload Flake8 Report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt

      - name: Upload Mypy Report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: mypy_report.txt

      - name: Upload Hadolint Report
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-report
          path: hadolint_report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy_report.txt

      # 游늷 Subir reportes JSON a GitHub Pages
      - name: Move JSON reports to public before deploying
        run: |
          mkdir -p public
          mv *.json public/  # Mueve los JSON a public/, pero NO los saca de ah칤.
      
      - name: Create JSON Hero Viewer
        run: |
          echo '<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>JSON Hero Viewer</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; }
                  iframe { width: 90%; height: 80vh; border: none; }
              </style>
          </head>
          <body>
              <h1>游늵 JSON Hero - Report Viewer</h1>
              <p>Select a JSON report to view:</p>
              <select id="json-selector" onchange="updateViewer()">
                  <option value="">-- Select a Report --</option>
                  <option value="bandit_report.json">Bandit Report</option>
                  <option value="flake8_report.json">Flake8 Report</option>
                  <option value="hadolint_report.json">Hadolint Report</option>
                  <option value="mypy_report.json">Mypy Report</option>
                  <option value="trivy_report.json">Trivy Report</option>
              </select>
              <br><br>
              <iframe id="json-hero-frame"></iframe>
              <script>
                  function updateViewer() {
                      let file = document.getElementById("json-selector").value;
                      if (file) {
                          let viewerUrl = `https://jsonhero.io/new?url=${window.location.origin}/${file}`;
                          document.getElementById("json-hero-frame").src = viewerUrl;
                      }
                  }
              </script>
          </body>
          </html>' > public/index.html
      
      - name: Add .nojekyll to prevent GitHub Pages issues
        run: touch public/.nojekyll
      
      - name: Deploy reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true
      