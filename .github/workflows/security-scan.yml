name: Security Scan with Trivy & Hadolint

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Required permission to update SECURITY.md

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-assume pytest-benchmark locust bandit safety flake8 mypy pytest-benchmark[histogram] pygal pygaljs matplotlib jq

      - name: 📥 Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      - name: Install Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      # 📌 1️⃣ Análisis de seguridad con Bandit
      - name: Perform security check with Bandit (TXT)
        run: bandit -r . -f txt -o bandit_report.txt || echo "Bandit found security issues."
      
      - name: Perform security check with Bandit (JSON)
        run: bandit -r . -f json -o bandit_report.json || echo "Bandit found security issues."

      # 📌 2️⃣ Análisis de dependencias con Safety
      - name: Check dependencies for vulnerabilities with Safety
        run: safety check -r requirements.txt

      # 📌 3️⃣ Linting con Flake8
      - name: Check code quality with Flake8 (TXT)
        run: flake8 . --output-file=flake8_report.txt || echo "Flake8 found formatting issues."

      - name: Convert Flake8 output to JSON
        run: jq -R -s -c 'split("\n") | map(select(length > 0)) | {flake8_report: .}' flake8_report.txt > flake8_report.json

      # 📌 4️⃣ Type Checking con Mypy
      - name: Check type consistency with Mypy (TXT)
        run: mypy . | tee mypy_report.txt || echo "Mypy found type inconsistencies."

      - name: Convert Mypy output to JSON
        run: jq -R -s -c 'split("\n") | map(select(length > 0)) | {mypy_report: .}' mypy_report.txt > mypy_report.json

      # 📌 5️⃣ Pruebas unitarias y de rendimiento
      - name: Run unit tests
        run: pytest tests --disable-warnings || echo "Tests failed, but the workflow will continue."

      - name: Ensure benchmark directory exists
        run: mkdir -p .benchmarks

      - name: Run performance tests
        run: pytest tests --benchmark-only --benchmark-compare --benchmark-histogram --benchmark-save=benchmark_results --benchmark-autosave

      - name: Move benchmark results to .benchmarks root
        run: |
          BENCHMARK_FILE=$(find .benchmarks -type f -name "0001_benchmark_results.json" | head -n 1)
          if [ -f "$BENCHMARK_FILE" ]; then
            mv "$BENCHMARK_FILE" .benchmarks/latest.json
          else
            echo "No benchmark results found."
            exit 1
          fi

      - name: Move and rename benchmark histograms
        run: |
          HISTOGRAM=$(find . -type f | grep -i '\.svg$' | head -n 1)
          if [ -f "$HISTOGRAM" ]; then
            echo "Moving histogram: $HISTOGRAM"
            mv "$HISTOGRAM" .benchmarks/latest_benchmark.svg
          else
            echo "Warning: No benchmark histograms found."
          fi

      # 📌 6️⃣ Análisis de seguridad en Docker
      - name: Build Docker Image
        run: docker build -t my-docker-image .

      - name: Scan Docker image with Trivy (TXT)
        run: trivy image --format table --output trivy_report.txt my-docker-image

      - name: Scan Docker image with Trivy (JSON)
        run: trivy image --format json --output trivy_report.json my-docker-image

      # 📌 7️⃣ Linting de Dockerfile con Hadolint
      - name: Lint Dockerfile with Hadolint (TXT)
        run: hadolint Dockerfile --format tty > hadolint_report.txt || echo "Hadolint found issues."

      - name: Lint Dockerfile with Hadolint (JSON)
        run: hadolint Dockerfile --format json > hadolint_report.json || echo "Hadolint found issues."

      # 📌 Subir archivos TXT como artefactos en GitHub Actions
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.txt

      - name: Upload Flake8 Report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt

      - name: Upload Mypy Report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: mypy_report.txt

      - name: Upload Hadolint Report
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-report
          path: hadolint_report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy_report.txt

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: .benchmarks/latest.json

      - name: Upload Benchmark Histogram
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-histogram
          path: .benchmarks/latest_benchmark.svg

      # 📌 Subir reportes JSON a GitHub Pages
      - name: Setup GitHub Pages branch
        run: |
          mkdir -p public
          mv *report.json public/

      - name: Deploy reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./public
