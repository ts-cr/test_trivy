name: Security Scan with Trivy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Permiso necesario para actualizar SECURITY.md

jobs:
  security_scan:
    name: üîç Security Scan and Update SECURITY.md
    runs-on: ubuntu-latest

    steps:
      - name: üõ†Ô∏è Checkout Repo
        uses: actions/checkout@v4

      - name: üì• Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: üî® Build Docker Image (Python 3)
        run: |
          docker build -t python-app:latest .

      - name: üõ° Run Trivy Scan (Generate JSON Report)
        run: |
          trivy image --format json -o trivy-results.json python-app:latest

      - name: üõ† Debug Trivy Output
        run: |
          echo "=== TRIVY RAW JSON ==="
          cat trivy-results.json
          echo "=== JQ PARSED OUTPUT ==="
          jq -r '
            .Results[].Vulnerabilities[] |
            { 
              severity: .Severity, 
              vuln_id: .VulnerabilityID, 
              title: .Title, 
              pkg: .PkgName,
              order: (if .Severity == "CRITICAL" then 1 
                      elif .Severity == "HIGH" then 2 
                      elif .Severity == "MEDIUM" then 3 
                      elif .Severity == "LOW" then 4 
                      else 5 end) 
            } | 
            [.order, .severity, .vuln_id, .title, .pkg] | 
            @tsv' trivy-results.json

      - name: üìù Update SECURITY.md
        run: |
          echo "# Security Report" > SECURITY.md
          echo "" >> SECURITY.md
          echo "## √öltima Actualizaci√≥n" >> SECURITY.md
          echo "\`$(date +"%d/%m/%Y")\`" >> SECURITY.md
          echo "" >> SECURITY.md
          echo "## Vulnerabilidades Detectadas" >> SECURITY.md
          echo "| Severidad  | Tipo          | Descripci√≥n                           | Recurso Afectado          |" >> SECURITY.md
          echo "|------------|---------------|---------------------------------------|---------------------------|" >> SECURITY.md
          
          jq -r '
            .Results[].Vulnerabilities[] |
            { 
              severity: .Severity, 
              vuln_id: .VulnerabilityID, 
              title: .Title, 
              pkg: .PkgName,
              order: (if .Severity == "CRITICAL" then 1 
                      elif .Severity == "HIGH" then 2 
                      elif .Severity == "MEDIUM" then 3 
                      elif .Severity == "LOW" then 4 
                      else 5 end) 
            } | 
            [.order, .severity, .vuln_id, .title, .pkg] | 
            @tsv' trivy-results.json | sort -k1,1n | cut -f2- | while IFS=$'\t' read -r severity vuln_id title pkg; do
              echo "| $severity | $vuln_id | $title | $pkg |" >> SECURITY.md
            done

          echo "" >> SECURITY.md
          echo "## Nota" >> SECURITY.md
          echo "Estas vulnerabilidades son generadas autom√°ticamente mediante Trivy." >> SECURITY.md

      - name: üîç Check for Changes in SECURITY.md
        run: |
          git diff --exit-code SECURITY.md || echo "SECURITY.md ha cambiado."

      - name: üì§ Commit Changes
        run: |
          if git diff --quiet SECURITY.md; then
            echo "No hay cambios en SECURITY.md, omitiendo commit."
          else
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add SECURITY.md
            git commit -m "Actualizar SECURITY.md con resultados de Trivy"
            git push
          fi

      - name: üì° Convert Trivy Report to SonarQube Format
        run: |
          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > trivy-sonarqube-report.xml
          echo "<testsuites>" >> trivy-sonarqube-report.xml
          jq -r '
            .Results[].Vulnerabilities[] |
            {
              severity: .Severity, 
              vuln_id: .VulnerabilityID, 
              title: .Title, 
              pkg: .PkgName,
              description: .Description
            } | 
            "<testcase name=\"" + .vuln_id + "\" classname=\"" + .pkg + "\"><failure message=\"" + .severity + ": " + .title + "\"><![CDATA[" + .description + "]]></failure></testcase>"' trivy-results.json >> trivy-sonarqube-report.xml
          echo "</testsuites>" >> trivy-sonarqube-report.xml

      - name: üõ† Install SonarQube Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      - name: üöÄ Upload Report to SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=ts-cr_test_trivy \
            -Dsonar.organization=ts-cr \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.externalIssuesReportPaths=trivy-sonarqube-report.xml
            -Dsonar.branch.name=main
