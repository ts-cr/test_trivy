name: Security Scan with Trivy & Hadolint

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Required permission to update SECURITY.md

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-assume pytest-benchmark locust bandit safety flake8 mypy pytest-benchmark[histogram] pygal pygaljs matplotlib jq

      - name: üì• Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      - name: üì• Install Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      # üìå 1Ô∏è‚É£ Bandit - An√°lisis de seguridad en Python
      - name: Run Bandit (TXT)
        run: bandit -r . -f txt -o bandit_report.txt || echo "Bandit found security issues."

      - name: Run Bandit (JSON)
        run: bandit -r . -f json -o bandit_report.json || echo "Bandit found security issues."

      # üìå 2Ô∏è‚É£ Safety - An√°lisis de dependencias
      - name: Check dependencies for vulnerabilities with Safety
        run: safety check -r requirements.txt

      # üìå 3Ô∏è‚É£ Flake8 - Linting en Python
      - name: Run Flake8 (TXT)
        run: flake8 . --output-file=flake8_report.txt || echo "Flake8 found formatting issues."

      - name: Convert Flake8 output to JSON
        run: jq -R -s -c 'split("\n") | map(select(length > 0)) | {flake8_report: .}' flake8_report.txt > flake8_report.json

      # üìå 4Ô∏è‚É£ Mypy - Type Checking en Python
      - name: Run Mypy (TXT)
        run: mypy . | tee mypy_report.txt || echo "Mypy found type inconsistencies."

      - name: Convert Mypy output to JSON
        run: jq -R -s -c 'split("\n") | map(select(length > 0)) | {mypy_report: .}' mypy_report.txt > mypy_report.json

      # üìå 5Ô∏è‚É£ Trivy - An√°lisis de seguridad en Docker
      - name: Build Docker Image
        run: docker build -t my-docker-image .

      - name: Run Trivy scan (TXT)
        run: trivy image --format table --output trivy_report.txt my-docker-image

      - name: Run Trivy scan (JSON)
        run: trivy image --format json --output trivy_report.json my-docker-image

      # üìå 6Ô∏è‚É£ Hadolint - Linting de Dockerfile
      - name: Run Hadolint (TXT)
        run: hadolint Dockerfile --format tty > hadolint_report.txt || echo "Hadolint found issues."

      - name: Run Hadolint (JSON)
        run: hadolint Dockerfile --format json > hadolint_report.json || echo "Hadolint found issues."

      # üìå 7Ô∏è‚É£ Subir archivos TXT como artefactos en GitHub Actions
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.txt

      - name: Upload Flake8 Report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt

      - name: Upload Mypy Report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: mypy_report.txt

      - name: Upload Hadolint Report
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-report
          path: hadolint_report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy_report.txt

      # üìå 8Ô∏è‚É£ Subir reportes JSON a GitHub Pages
      - name: Setup GitHub Pages branch
        run: |
          mkdir -p public
          mv *report.json public/

      - name: Deploy reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./public
